#! /bin/bash

# 如果 DOCKER_IMAGE_NAME 为空则定义一个默认变量
test -z "$DOCKER_IMAGE_NAME" && DOCKER_IMAGE_NAME="$DOCKER_REGISTRY/$app_prj/$APP_SUB"

DockerLogin(){
    # 登录 Registry

    load password

    DOCKER_LOGIN_PASSWORD="`Password docker`"

    msg i "Login to $DOCKER_REGISTRY"
    sudo docker login $DOCKER_REGISTRY -u $DOCKER_LOGIN_USER -p $DOCKER_LOGIN_PASSWORD 2> /dev/null

    # 如果登录失败(返回状态不为0)则报错退出
    test $? = 0 || msg e "Login failed"
}

DockerImagesList(){
    # 列出 images

    test "$1" = "all" && opts="| grep -v '<none>'" || opts=
    sudo docker images $opts
}

DockerImagesClean(){
    none_images_id="`sudo docker images | awk '$2 == "<none>"' | awk '{print $3}'`"

    test ! -z "$none_images_id" && sudo docker rmi $none_images_id || msg i "All images looks good"
}

DockerImageSize(){
    image_name="`echo $DOCKER_IMAGE_NAME  | awk -F ':' '{print $1}'`"
     image_tag="`echo $DOCKER_IMAGE_NAME  | awk -F ':' '{print $2}'`"
    DockerImagesList | grep "$image_name" | grep "$image_tag" | awk '{print $7,$8}' | head -1
}

DockerImageBuild(){
    # Docker image build 函数
    test -z "$DOCKER_TAG"  && DOCKER_TAG="latest"

    # 如果 DOCKER_TAG 中包含 '/'， 则替换为 '-'
    echo "$DOCKER_TAG" | grep -q "/"
    test $? = 0 && DOCKER_TAG="`echo $DOCKER_TAG | tr '/' '-'`"

    if [ -f "Dockerfile" ]
    then
        test -z "$DOCKER_IMAGE_NAME" && msg e "Require docker image name"

        if [ -z "$DOCKER_IMAGE_EXIST_CHECK" ]
        then
            DockerImagesList | grep "$app_prj/$APP_SUB " | grep -q "$DOCKER_TAG "
            diecs="$?"
        else
            diecs="1"
        fi
        if [ "$diecs" = "0" ]
        then
            msg i "Docker image $DOCKER_IMAGE_NAME:$DOCKER_TAG already exist. Skipped docker build."
        else
            msg i "Build image $DOCKER_IMAGE_NAME:$DOCKER_TAG"
            msg i "Docker build options: $DOCKER_BUILD_OPTS"
            sudo docker build $DOCKER_BUILD_OPTS -t $DOCKER_IMAGE_NAME:$DOCKER_TAG .
            test $? = 0 && msg i "Successfully completed build image" || msg e "Failed to build image"

            msg i "Image $DOCKER_IMAGE_NAME size: `DockerImageSize`"
        fi
    else
            msg e "File not found: Dockerfile"
    fi
}

DockerImagePush(){
    DockerLogin
    msg i "Push $DOCKER_IMAGE_NAME:$DOCKER_TAG"
    sudo docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG

    test $? = 0 || msg e "Failed to push docker image"
}

DockerImage(){
    case "$1" in
        build|Build)    DockerImageBuild        ;;
        clean|Clean)    DockerImagesClean       ;;
         list|List)     DockerImagesList        ;;
         push|Push)     DockerImagePush         ;;
         size|Size)     DockerImageSize         ;;
    esac
}

DockerfileInit(){
    test "$SKIP_DOCKER" = "true"    && \
    msg i "Skip DockerfileInit"     && \
    return 0

    msg i "Copy Dockerfiles"

    if [ -d $TEMPLATE_SPECIFY ] || [ -L $TEMPLATE_SPECIFY ]
    then
        cp -rfH $TEMPLATE_SPECIFY/* .
        msg i "Use specify templates"
    else
        cp -rfH $TEMPLATE_COMMON/*  .
        msg i "Use common templates"
    fi

    # Copy Docker ignore file
    cp $DOCKERFILE_IGNORE .

    test -z "$APP_FILE" && test "$APP_PRJ" = "WEB" && APP_FILE="."
    test -z "$APP_NAME" && APP_NAME="$APP_SUB"
    test -z "$PKG_NAME" || APP_NAME="$PKG_NAME"

    f="Dockerfile"

    msg i "Preparing project files"

    msg i "Preparing $f"

    test -z "$SCM_REVISION"      && SCM_REVISION="$SVN_REVISION"

    DOCKER_LABEL="job.name=$JOB_NAME build.number=$BUILD_NUMBER build.user=\"$BUILD_USER\" scm.revision=$SCM_REVISION"

    if [ -z "$SKIP_SUDO" ]
    then
        load sudo
        sudo_args="-u $RUN_USER -p $WWW_ROOT/$APP_NAME $SUDO_EXTRA_CMDS"
        echo "RUN `GenSudoSettings $sudo_args -d \"$WRITE_DIRS\" -c \"SUDO_COMMANDS\" | tr '\n' '; '`"   >> $f
    fi

    echo "LABEL $DOCKER_LABEL"                      >> $f
    echo "COPY $APP_FILE $WEB_ROOT_DIR/$APP_NAME"   >> $f
    echo "ENTRYPOINT [\"/run.sh\"]"                 >> $f
}

DockerfileBackup(){
    msg i "Backup Dockerfiles"
    test -d "$USING_DOCKERFILES" || mkdir -p $USING_DOCKERFILES
    rsync -au $f_lists $USING_DOCKERFILES
}

DockerImageController(){
    test "$SKIP_DOCKER" = "true"    && \
    msg i "Skip DockerController"   && \
    return 0

    DockerImage Build
    DockerImage Push
}
